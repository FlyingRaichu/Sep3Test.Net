@page "/RegisterUser"
@using HttpClients.Interfaces
@using Domain.DTOs.User
@inject IUserService userService
@inject NavigationManager NavigationManager

<h3>Register User</h3>
<MudGrid Justify="Justify.Center" Class="d-flex align-items-center">
    <MudItem xs="12" md="5" lg="3" Class="text-center">
        <MudCard Outlined="true">
            <MudCardContent>
                <MudGrid Justify="Justify.Center" Class="text-center">
                    <MudItem xs="12">
                        <MudText Typo="Typo.h4">Welcome to Knithub!</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText Typo="Typo.body1">Register here:</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="@email" Label="Email" Variant="Variant.Outlined"></MudTextField>
                        <MudTextField @bind-Value="@username" Label="Username" Variant="Variant.Outlined"></MudTextField>
                        <MudTextField @bind-Value="@password" Label="Password" InputType="InputType.Password" Variant="Variant.Outlined"></MudTextField>
                        @if (!string.IsNullOrEmpty(password) && !IsPasswordStrong(password))
                        {
                            <MudText Color="Color.Error" Typo="Typo.body2">Password should be at least 8 characters long and contain a combination of letters, numbers, and special characters.</MudText>
                        }
                    </MudItem>
                    <MudItem xs="12">
                        @if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password) || string.IsNullOrWhiteSpace(email) || !IsPasswordStrong(password))
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Tertiary" Disabled="true" FullWidth="true">Register</MudButton>
                        }
                        else
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Tertiary" OnClick="Create" FullWidth="true">Register</MudButton>
                        }
                    </MudItem>
                    <MudItem xs="12">
                        <MudText Typo="Typo.body2">Have an account? Log in <MudLink Href="/Login" Typo="Typo.body2">here.</MudLink></MudText>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
        @if (!string.IsNullOrEmpty(resultMsg)) 
         {
             <MudText Color="Color.Error" Class="text-center">@resultMsg</MudText>
         }
    </MudItem>
</MudGrid>

@code {
    private string username = "";
    private string password = "";
    private string email = "";
    private string role = "user";
    private string resultMsg = "";

    private async Task Create()
    {
        resultMsg = "";

        try
        {
            UserCreationDto dto = new(username, password, email, role);
            await userService.RegisterAsync(dto);
            await LoginAsync();
            username = "";
            password = "";
            email = "";
            resultMsg = "User successfully created";

            NavigationManager.NavigateTo("./");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
        }
    }

    private async Task LoginAsync()
    {
        try
        {
            await userService.LoginAsync(username, password);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = $"Error: {e.Message}";
        }
    }
    private bool IsPasswordStrong(string password)
    {
    // Add your password strength criteria here
    // For example, a password should be at least 8 characters long
    // and contain a combination of letters, numbers, and special characters.
        return password.Length >= 8 &&
               password.Any(char.IsLetter) &&
               password.Any(char.IsDigit) &&
               (password.Any(char.IsSymbol) || password.Any(char.IsPunctuation));
    }

}
