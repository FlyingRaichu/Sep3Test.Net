@page "/BackOfficeEditItem/{itemId:int}"
@using HttpClients.Implementations
@using Domain.DTOs.Item
@using HttpClients.Interfaces
@using System.Globalization
@inject NavigationManager NavigationManager
@inject IItemService ItemService
@inject ITagService TagService
@attribute [Authorize("MustBeAdmin")]

@if (item != null)
{
    <h3>Edit @item.Title</h3>
}

<MudTextField @bind-Value="@title" Label="Title" Variant="Variant.Outlined" Margin="Margin.Dense"/>
<MudTextField @bind-Value="@description" Label="Description" Variant="Variant.Outlined" Margin="Margin.Dense"/>
<MudTextField @bind-Value="@priceString" Label="Price" Variant="Variant.Outlined" Margin="Margin.Dense"/>
<MudTextField @bind-Value="@manufacturer" Label="Manufacturer" Variant="Variant.Outlined" Margin="Margin.Dense"/>
<MudTextField @bind-Value="@stockString" Label="Stock" Variant="Variant.Outlined" Margin="Margin.Dense"/>
<MudTextField @bind-Value="@discountPercentageString" Label="Discount Percentage" Variant="Variant.Outlined" Margin="Margin.Dense"/>

<div>
    <label>Select Tags:</label>
    <select @bind="selectedTag" class="form-control">
        @if (tags == null)
        {
        }
        else if (!tags.Any())
        {
            <option>No items to display.</option>
        }
        else
        {
            @if (string.IsNullOrEmpty(selectedTag))
            {
                <option value="" disabled selected hidden>-----</option>
            }
            @foreach (var tag in tags)
            {
                <option value="@tag.Id">@tag.TagName</option>
            }
        }
    </select>
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" @onclick="AddTag">
        <MudIcon Icon="oi oi-plus" />
    </MudButton>
    <ul>
        @if (tagIdsForSending != null)
        {
            <Label>Added tags:</Label>
            @foreach (var selectedTagId in tagIdsForSending)
            {
                <li @onclick="@(() => RemoveTag(selectedTagId))">@tags.FirstOrDefault(t => t.Id == selectedTagId)?.TagName</li>
            }
        }
    </ul>
</div>

<MudButton Variant="Variant.Filled" Disabled="@(string.IsNullOrEmpty(title) || string.IsNullOrEmpty(description) || string.IsNullOrEmpty(priceString) || !IsDiscountPercentageValid())" @onclick="EditItemAsync">Confirm</MudButton>

<label style="color: red">@msg</label>
@code {
    [Parameter]
    public int itemId { get; set; }

    private Item? item;
    private string title, description, priceString, manufacturer, stockString, discountPercentageString;
    private string msg = "";
    ICollection<Tag> tags;
    List<int> tagIdsForSending;
    ICollection<Tag> displayTags;
    string selectedTag;

    protected override async Task OnInitializedAsync()
    {
        item = await ItemService.GetByIdAsync(itemId);
        title = item.Title;
        description = item.Description;
        priceString = item.Price.ToString(CultureInfo.InvariantCulture);
        manufacturer = item.Manufacturer;
        stockString = item.Stock.ToString();
        discountPercentageString = item.DiscountPercentage.ToString();

        await PopulateTags();
        tagIdsForSending = item.Tags.ToList();
    }

    private async void EditItemAsync()
    {
        if (double.TryParse(priceString, out var price) && int.TryParse(stockString, out var stock) && double.TryParse(this.discountPercentageString, out var discountPercentageString))
        {
            var dto = new ItemUpdateDto(itemId)
            {
                Title = title,
                Description = description,
                Price = price,
                Manufacturer = manufacturer,
                Stock = stock,
                Tags = tagIdsForSending,
                DiscountPercentage = discountPercentageString
            };
            await ItemService.UpdateAsync(dto);
            NavigationManager.NavigateTo("/BackOfficeItems");
        }
        else
        {
            msg = "Please insert a correct formatting for the price.";
        }
    }

    private void AddTag()
    {
        Console.WriteLine($"Selected tag: {selectedTag}");
        if (!int.TryParse(selectedTag, out var selectedTagId)) return;
        var tagToAdd = tags.FirstOrDefault(t => t.Id == selectedTagId);

        if (tagToAdd == null) return;
        tagIdsForSending.Add(tagToAdd.Id);
        StateHasChanged();
    }

    private void RemoveTag(int id)
    {
        tagIdsForSending.Remove(id);
        StateHasChanged();
    }

    private async Task PopulateTags()
    {
        tags = await TagService.GetTagsAsync(null);
    }
    private bool IsDiscountPercentageValid()
    {
        if (double.TryParse(discountPercentageString, out var discountPercentage))
        {
            return discountPercentage >= 0 && discountPercentage <= 100;
        }

        return false;
    }

}
