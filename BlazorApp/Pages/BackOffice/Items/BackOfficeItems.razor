@page "/BackOfficeItems"
@using HttpClients.Implementations
@using HttpClients.Interfaces
@using Domain.DTOs.Item
@inject NavigationManager NavigationManager
@inject IItemService ItemService
@inject ITagService TagService
@inject IJSRuntime JsRuntime
@inject DiscountBannerService DiscountBannerService
@attribute [Authorize("MustBeAdmin")]
<BackOfficeNavMenu/>
<h3>Back Office Items</h3>
<MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" @onclick="@(() => NavigationManager.NavigateTo("/BackOfficeCreateItem"))">
</MudFab>
<input type="text" @bind="searchString" @oninput="LoadItemsDebounced" placeholder="Search..."/>
@* <button @onclick="LoadItems" disabled="@(string.IsNullOrEmpty(searchString))" class="acceptbtn">Confirm</button> *@
<MudText Typo="Typo.h5">DISCOUNT ALL ITEMS!</MudText>
<MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" VerticalAlign="false">
    <MudButton Color="Color.Primary" @onclick="(args) => ChangeDiscount(0)">No more discounts</MudButton>
    <MudButton Color="Color.Primary" @onclick="(args) => ChangeDiscount(10)">10%</MudButton>
    <MudButton Color="Color.Primary" @onclick="(args) => ChangeDiscount(20)">20%</MudButton>
    <MudButton Color="Color.Primary" @onclick="(args) => ChangeDiscount(30)">30%</MudButton>
    <MudButton Color="Color.Primary" @onclick="(args) => ChangeDiscount(50)">50%</MudButton>
    <MudButton Color="Color.Primary" @onclick="(args) => ChangeDiscount(99)"> YOLO WE ARE GOING OUT OF BUSINESS 99%</MudButton>
</MudButtonGroup>
<MudTable Items="@items" Hover="true" Breakpoint="Breakpoint.Sm"  LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Price</MudTh>
          <MudTh>Discount Percentage</MudTh>
        <MudTh>Manufacturer</MudTh>
        <MudTh>Stock</MudTh>
        <MudTh>Tags</MudTh>
        <MudTh></MudTh> <!-- Empty header cell for actions -->
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Price">@context.Price</MudTd>
        <MudTd DataLabel="Price">@context.DiscountPercentage</MudTd>
        <MudTd DataLabel="Manufacturer">@context.Manufacturer</MudTd>
        <MudTd DataLabel="Stock">@context.Stock</MudTd>
        <MudTd DataLabel="Tags">
            @if (tagsDictionary.ContainsKey(@context.Id))
            {
                @tagsDictionary[@context.Id]
            }
            else
            {
                <span>Item has no tags.</span>
            }
        </MudTd>
        <MudTd>
            <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Edit" @onclick="@(() => NavigationManager.NavigateTo($"/BackOfficeEditItem/{@context.Id}"))">
                
            </MudFab>

            <MudFab Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Large"  OnClick="(e) => ShowDeleteConfirmation(context.Id)" Data-toggle="modal" Data-target="#deleteConfirmationModal">
            </MudFab>
        </MudTd>
        
        

    </RowTemplate>
</MudTable>







@* Pop-up code *@
<div class="modal" id="deleteConfirmationModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="close" aria-label="Close" data-dismiss="modal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this item?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" @onclick="DeleteItem" class="btn btn-danger">Delete</button>
            </div>
        </div>
    </div>
</div>

<label style="color: red">@msg</label>

@code {
    private ICollection<Item> items;
    private Dictionary<int, string> tagsDictionary = new Dictionary<int, string>();
    private string msg = "";
    private int itemToDeleteId;
    private string? searchString = "";
    private Timer debounceTimer;
    List<int> tagIdsForSending;

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
        await LoadTags();
    }

    private void LoadItemsDebounced(ChangeEventArgs args)
    {
        searchString = args?.Value?.ToString() ?? "";
        debounceTimer?.Dispose();
        debounceTimer = new Timer(cback => { cback = InvokeAsync(LoadItems); }, null, 500, Timeout.Infinite);
    }

    private async Task LoadItems()
    {
        try
        {
            items = await ItemService.GetItemsAsync(searchString, null, null, null, null, null,null);
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task LoadTags()
    {
        foreach (var item in items)
        {
            var tags = await GetTagsForItem(item);
            var tagString = string.Join(", ", tags);
            tagsDictionary.Add(item.Id, tagString);
        }
    }

    private void ShowDeleteConfirmation(int id)
    {
        itemToDeleteId = id;
    }

    private async void DeleteItem()
    {
        try
        {
            await ItemService.DeleteAsync(itemToDeleteId);
            var itemToRemove = items.FirstOrDefault(i => i.Id == itemToDeleteId)!;
            items.Remove(itemToRemove);
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
        finally
        {
            await ExecuteJavascript("$('#deleteConfirmationModal').modal('hide')");
        }
    }

    private async Task ExecuteJavascript(string script)
    {
        await JsRuntime.InvokeVoidAsync("eval", script);
    }

    private async Task<IEnumerable<string>> GetTagsForItem(Item item)
    {
        var ids = new List<int>();
        if (item.Tags != null)
        {
            ids.AddRange(item.Tags);
        }
        
        var tags = await TagService.GetAllWithId(ids);
        IEnumerable<string> tagsString = tags.Select(tag => tag.TagName).ToList();

        return tagsString;
    }
    private async Task ChangeDiscount(int discountValue)
    {
        try
        {
            var discountPercentage = (double)discountValue;

    // Update the discount percentage for all items
            foreach (var item in items)
            {
                tagIdsForSending = item.Tags.ToList();

    // Create a new DTO for each item
                var dto = new ItemUpdateDto(item.Id)
                {
                    Title = item.Title,
                    Description = item.Description,
                    Price = item.Price,
                    Manufacturer = item.Manufacturer,
                    Stock = item.Stock,
                    Tags = tagIdsForSending,
                    DiscountPercentage = discountPercentage
                };

    // Update the item with the new DTO
                await ItemService.UpdateAsync(dto);
            }

    // Reload items to reflect the changes
            await LoadItems();
            
            DiscountBannerService.ShowDiscountBanner = true;
            if (discountValue == 0)
            {
                DiscountBannerService.ShowDiscountBanner = false;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }


}