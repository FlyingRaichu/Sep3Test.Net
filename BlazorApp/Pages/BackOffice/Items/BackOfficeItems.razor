@page "/BackOfficeItems"
@using HttpClients.Implementations
@using HttpClients.Interfaces
@inject NavigationManager NavigationManager
@inject IItemService ItemService
@inject ITagService TagService
@inject IJSRuntime JsRuntime
@attribute [Authorize("MustBeAdmin")]
<BackOfficeNavMenu/>
<h3>Back Office Items</h3>
<input type="text" @bind="searchString" @oninput="LoadItemsDebounced" placeholder="Search..."/>
@* <button @onclick="LoadItems" disabled="@(string.IsNullOrEmpty(searchString))" class="acceptbtn">Confirm</button> *@
<table class="table">
    <thead>
    <tr>
        <th>Id</th>
        <th>Title</th>
        <th>Description</th>
        <th>Price</th>
        <th>Manufacturer</th>
        <th>Stock</th>
        <th>Tags</th>
    </tr>
    </thead>
    <tbody>
    @if (items == null)
    {
    }
    else if (!items.Any())
    {
        <p>No items to display.</p>
    }
    else
    {
        @foreach (Item item in items)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.Title</td>
                <td>@item.Description</td>
                <td>
                    @item.Price

                </td>
                <td>@item.Manufacturer</td>
                <td>@item.Stock</td>
                @if (tagsDictionary.ContainsKey(item.Id))
                {
                    <td>@tagsDictionary[item.Id]</td>
                }
                else
                {
                    <td>Item has no tags.</td>
                }
                <td>
                    <button style="margin-left: 50px" @onclick="@(() => NavigationManager.NavigateTo($"/BackOfficeEditItem/{@item.Id}"))">
                        <i style="padding: 0 12px" class="oi oi-pencil"></i>
                    </button>

                    <button style="margin-left: 5px" @onclick="(e) => ShowDeleteConfirmation(item.Id)" data-toggle="modal" data-target="#deleteConfirmationModal">
                        <i style="padding: 0 12px" class="oi oi-trash"></i>
                    </button>
                </td>
            </tr>
        }
    }
    </tbody>
</table>

<button class="oi oi-plus" @onclick="@(() => NavigationManager.NavigateTo("/BackOfficeCreateItem"))"></button>

@* Pop-up code *@
<div class="modal" id="deleteConfirmationModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="close" aria-label="Close" data-dismiss="modal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this item?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" @onclick="DeleteItem" class="btn btn-danger">Delete</button>
            </div>
        </div>
    </div>
</div>

<label style="color: red">@msg</label>

@code {
    private ICollection<Item> items;
    private Dictionary<int, string> tagsDictionary = new Dictionary<int, string>();
    private string msg = "";
    private int itemToDeleteId;
    private string? searchString = "";
    private Timer debounceTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
        await LoadTags();
    }

    private void LoadItemsDebounced(ChangeEventArgs args)
    {
        searchString = args?.Value?.ToString() ?? "";
        debounceTimer?.Dispose();
        debounceTimer = new Timer(cback => { cback = InvokeAsync(LoadItems); }, null, 500, Timeout.Infinite);
    }

    private async Task LoadItems()
    {
        try
        {
            items = await ItemService.GetItemsAsync(searchString, null, null, null, null, null);
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task LoadTags()
    {
        foreach (var item in items)
        {
            var tags = await GetTagsForItem(item);
            var tagString = string.Join(", ", tags);
            tagsDictionary.Add(item.Id, tagString);
        }
    }

    private void ShowDeleteConfirmation(int id)
    {
        itemToDeleteId = id;
    }

    private async void DeleteItem()
    {
        try
        {
            await ItemService.DeleteAsync(itemToDeleteId);
            var itemToRemove = items.FirstOrDefault(i => i.Id == itemToDeleteId)!;
            items.Remove(itemToRemove);
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
        finally
        {
            await ExecuteJavascript("$('#deleteConfirmationModal').modal('hide')");
        }
    }

    private async Task ExecuteJavascript(string script)
    {
        await JsRuntime.InvokeVoidAsync("eval", script);
    }

    private async Task<IEnumerable<string>> GetTagsForItem(Item item)
    {
        var ids = new List<int>();
        if (item.Tags != null)
        {
            ids.AddRange(item.Tags);
        }
        
        var tags = await TagService.GetAllWithId(ids);
        IEnumerable<string> tagsString = tags.Select(tag => tag.TagName).ToList();

        return tagsString;
    }
}