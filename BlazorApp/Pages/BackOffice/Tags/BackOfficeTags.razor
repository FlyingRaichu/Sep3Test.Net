@page "/BackOfficeTags"
@using HttpClients.Implementations
@using Domain.DTOs.Tag
@using HttpClients.Interfaces
@inject NavigationManager NavigationManager
@inject ITagService TagService
@inject IJSRuntime JsRuntime
@attribute [Authorize("MustBeAdmin")]
<BackOfficeNavMenu />
<MudContainer>
    <MudPaper Elevation="4" Class="p-3">
        <h3>Back Office Tags</h3>
        <input type="text" @bind="searchString" @oninput="LoadTagsDebounced" placeholder="Search tags..."/>
        <br/>
         <MudButton  Variant="Variant.Filled" Color="Color.Primary" @onclick="ToggleCreateMode" >Create new tag</MudButton>
                @if (creatingTag)
                {
                    <div class="mt-3">
                        <h3>New tag:</h3>
                        <MudTextField @bind-Value="creatingTagName" Label="Tag Name" Variant="Variant.Filled" Class="mb-3" />
                        <MudButton  EndIcon="@Icons.Material.Filled.Send" Variant="Variant.Filled" Color="Color.Inherit" @onclick="CreateTag" disabled="@(string.IsNullOrEmpty(creatingTagName))" >Create</MudButton>
                    </div>
                }
        
        <MudTable Items="@tags" Class="mb-3">
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Tag name</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Id</MudTd>
                @if (context.Id == tagInEditModeId)
                {
                    <MudTd>
                        <MudTextField @bind-Value="editedTagName" Variant="Variant.Filled" />
                    </MudTd>
                }
                else
                {
                    <MudTd>@context.TagName</MudTd>
                }
                <MudTd>
                    @if (context.Id == tagInEditModeId)
                    {
                        <MudButton StartIcon="@Icons.Material.Filled.Save" Variant="Variant.Filled" Color="Color.Success" @onclick="() => SaveEdit(context.Id)" >Save</MudButton>
                        <MudButton Variant="Variant.Filled" OnClick="CancelEdit" Color="Color.Warning">Cancel</MudButton>
                    }
                    else
                    {
                        <MudButton  StartIcon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Primary" @onclick="() => ToggleEditMode(context.Id)" />
                        <Button style="background-color: red; color: white; padding: 10px; border: none"  Variant="Variant.Filled" Color="Color.Error" @onclick="(e) => ShowDeleteConfirmation(context.Id)" data-toggle="modal" data-target="#deleteConfirmationModal">Delete tag</Button>
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>

       
    </MudPaper>
</MudContainer>

<!-- Pop-up code -->

<div class="modal" id="deleteConfirmationModal" tabindex="-1" role="dialog"> 
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="close" aria-label="Close" data-dismiss="modal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this item?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" @onclick="DeleteTag" class="btn btn-danger">Delete</button>
            </div>
        </div>
    </div>
</div>

<label style="color: red">@msg</label>

@code {
    private ICollection<Tag> tags;
    private string msg = "";
    private int tagToDeleteId;
    private string? searchString = "";
    private Timer debounceTimer;

    private int tagInEditModeId = -1;
    private string editedTagName = "";

    private bool creatingTag = false;
    private string creatingTagName;

    private bool isDeleteConfirmationVisible = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadTags();
    }

    private void LoadTagsDebounced(ChangeEventArgs args)
    {
        searchString = args?.Value?.ToString() ?? "";
        debounceTimer?.Dispose();
        debounceTimer = new Timer(cback => { cback = InvokeAsync(LoadTags); }, null, 500, Timeout.Infinite);
    }

    private async Task LoadTags()
    {
        try
        {
            tags = await TagService.GetTagsAsync(searchString);
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task CreateTag()
    {
        var tagDto = new TagCreationDto(creatingTagName.ToLower());
        await TagService.CreateAsync(tagDto);
        await LoadTags();

        msg = "New Tag successfully created.";
        await Task.Delay(2000);
        msg = "";
        creatingTag = false;
    }

    private void ShowDeleteConfirmation(int id)
    {
        tagToDeleteId = id;
        isDeleteConfirmationVisible = true;
    }

    private async void DeleteTag()
    {
        try
        {
            await TagService.DeleteAsync(tagToDeleteId);
            var tagToRemove = tags.FirstOrDefault(i => i.Id == tagToDeleteId);
            tags.Remove(tagToRemove);
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
        finally
        {
            isDeleteConfirmationVisible = false;
        }
    }

    private void ToggleEditMode(int tagId)
    {
        tagInEditModeId = tagInEditModeId == tagId ? -1 : tagId;
        if (tagInEditModeId != -1)
        {
            editedTagName = "";
        }
    }

    private void ToggleCreateMode()
    {
        creatingTag = !creatingTag;
        StateHasChanged();
    }

    private async Task SaveEdit(int id)
    {
        var dto = new TagUpdateDto(id)
        {
            Name = editedTagName.ToLower()
        };
        await TagService.UpdateAsync(dto);
        await LoadTags();
        tagInEditModeId = -1;
        editedTagName = "";
    }

    private void CancelEdit()
    {
        tagInEditModeId = -1;
    }
}



@* @page "/BackOfficeTags" *@
@* @using HttpClients.Implementations *@
@* @using Domain.DTOs.Tag *@
@* @inject NavigationManager NavigationManager *@
@* @inject ITagService TagService *@
@* @inject IJSRuntime JsRuntime *@
@* @attribute [Authorize("MustBeAdmin")] *@
@* <BackOfficeNavMenu/> *@
@* <h3>Back Office Tags</h3> *@
@* <input type="text" @bind="searchString" @oninput="LoadTagsDebounced" placeholder="Search..."/> *@
@* $1$ <button @onclick="LoadItems" disabled="@(string.IsNullOrEmpty(searchString))" class="acceptbtn">Confirm</button> #1# *@
@* <table class="table"> *@
@*     <thead> *@
@*     <tr> *@
@*         <th>Id</th> *@
@*         <th>Tag name</th> *@
@*     </tr> *@
@*     </thead> *@
@*     <tbody> *@
@*     @if (tags == null) *@
@*     { *@
@*     } *@
@*     else if (!tags.Any()) *@
@*     { *@
@*         <p>No items to display.</p> *@
@*     } *@
@*     else *@
@*     { *@
@*         @foreach (var tag in tags) *@
@*         { *@
@*             <tr> *@
@*                 <td>@tag.Id</td> *@
@*                 @if (tag.Id == tagInEditModeId) *@
@*                 { *@
@*                     <input @bind="editedTagName"/> *@
@*                 } *@
@*                 else *@
@*                 { *@
@*                     <td>@tag.TagName</td> *@
@*                 } *@
@*                 <td> *@
@*                     @if (tag.Id == tagInEditModeId) *@
@*                     { *@
@*                         <button style="margin-left: 50px" @onclick="() => SaveEdit(tag.Id)"> *@
@*                             <i style="padding: 0 12px" class="oi oi-check"></i> *@
@*                         </button> *@
@*                         <button style="margin-left: 50px" @onclick="CancelEdit"> *@
@*                             <i style="padding: 0 12px" class="oi oi-x"></i> *@
@*                         </button> *@
@*                     } *@
@*                     else *@
@*                     { *@
@*                         <button style="margin-left: 50px" @onclick="() => ToggleEditMode(tag.Id)"> *@
@*                             <i style="padding: 0 12px" class="oi oi-pencil"></i> *@
@*                         </button> *@
@*                         <button style="margin-left: 5px" @onclick="(e) => ShowDeleteConfirmation(tag.Id)" data-toggle="modal" data-target="#deleteConfirmationModal"> *@
@*                             <i style="padding: 0 12px" class="oi oi-trash"></i> *@
@*                         </button> *@
@*                     } *@
@*                 </td> *@
@*             </tr> *@
@*         } *@
@*     } *@
@*     </tbody> *@
@* </table> *@
@* *@
@* <button class="oi oi-plus" @onclick="@(ToggleCreateMode)"></button> *@
@* *@
@* @if (creatingTag) *@
@* { *@
@*     <h3>New tag:</h3> *@
@*     <input @bind="creatingTagName"/> *@
@*     <button style="margin-left: 50px" @onclick="CreateTag" disabled="@(string.IsNullOrEmpty(creatingTagName))"> *@
@*         <i style="padding: 0 12px" class="oi oi-check"></i> *@
@*     </button> *@
@* } *@
@* *@
@* $1$ Pop-up code #1# *@
@* <div class="modal" id="deleteConfirmationModal" tabindex="-1" role="dialog"> *@
@*     <div class="modal-dialog" role="document"> *@
@*         <div class="modal-content"> *@
@*             <div class="modal-header"> *@
@*                 <h5 class="modal-title">Confirm Deletion</h5> *@
@*                 <button type="button" class="close" aria-label="Close" data-dismiss="modal"> *@
@*                     <span aria-hidden="true">&times;</span> *@
@*                 </button> *@
@*             </div> *@
@*             <div class="modal-body"> *@
@*                 <p>Are you sure you want to delete this item?</p> *@
@*             </div> *@
@*             <div class="modal-footer"> *@
@*                 <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button> *@
@*                 <button type="button" @onclick="DeleteTag" class="btn btn-danger">Delete</button> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@* </div> *@
@* *@
@* <label style="color: red">@msg</label> *@
@* *@
@* @code { *@
@*     private ICollection<Tag> tags; *@
@*     private string msg = ""; *@
@*     private int tagToDeleteId; *@
@*     private string? searchString = ""; *@
@*     private Timer debounceTimer; *@
@* *@
@*     private int tagInEditModeId = -1; *@
@*     private string editedTagName = ""; *@
@* *@
@*     private bool creatingTag = false; *@
@*     private string creatingTagName; *@
@* *@
@* *@
@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         await LoadTags(); *@
@*     } *@
@* *@
@*     private void LoadTagsDebounced(ChangeEventArgs args) *@
@*     { *@
@*         searchString = args?.Value?.ToString() ?? ""; *@
@*         debounceTimer?.Dispose(); *@
@*         debounceTimer = new Timer(cback => { cback = InvokeAsync(LoadTags); }, null, 500, Timeout.Infinite); *@
@*     } *@
@* *@
@*     private async Task LoadTags() *@
@*     { *@
@*         try *@
@*         { *@
@*             tags = await TagService.GetTagsAsync(searchString); *@
@*             StateHasChanged(); *@
@*         } *@
@*         catch (Exception e) *@
@*         { *@
@*             Console.WriteLine(e); *@
@*             msg = e.Message; *@
@*         } *@
@*     } *@
@* *@
@*     private async Task CreateTag() *@
@*     { *@
@*         var tagDto = new TagCreationDto(creatingTagName.ToLower()); *@
@*         await TagService.CreateAsync(tagDto); *@
@*         await LoadTags(); *@
@* *@
@*         msg = "New Tag successfully created."; *@
@*         await Task.Delay(2000); *@
@*         msg = ""; *@
@*         creatingTag = false; *@
@*     } *@
@* *@
@*     private void ShowDeleteConfirmation(int id) *@
@*     { *@
@*         tagToDeleteId = id; *@
@*     } *@
@* *@
@*     private async void DeleteTag() *@
@*     { *@
@*         try *@
@*         { *@
@*             await TagService.DeleteAsync(tagToDeleteId); *@
@*             var tagToRemove = tags.FirstOrDefault(i => i.Id == tagToDeleteId); *@
@*             tags.Remove(tagToRemove); *@
@*             StateHasChanged(); *@
@*         } *@
@*         catch (Exception e) *@
@*         { *@
@*             Console.WriteLine(e); *@
@*             msg = e.Message; *@
@*         } *@
@*         finally *@
@*         { *@
@*             await ExecuteJavascript("$('#deleteConfirmationModal').modal('hide')"); *@
@*         } *@
@*     } *@
@* *@
@*     private void ToggleEditMode(int tagId) *@
@*     { *@
@*         tagInEditModeId = tagInEditModeId == tagId ? -1 : tagId; *@
@*         if (tagInEditModeId != -1) *@
@*         { *@
@*             editedTagName = ""; *@
@*         } *@
@*     } *@
@* *@
@*     private void ToggleCreateMode() *@
@*     { *@
@*         creatingTag = !creatingTag; *@
@*         StateHasChanged(); *@
@*     } *@
@* *@
@*     private async Task SaveEdit(int id) *@
@*     { *@
@*         var dto = new TagUpdateDto(id) *@
@*         { *@
@*             Name = editedTagName.ToLower() *@
@*         }; *@
@*         await TagService.UpdateAsync(dto); *@
@*         await LoadTags(); *@
@*         tagInEditModeId = -1; *@
@*         editedTagName = ""; *@
@*     } *@
@* *@
@*     private void CancelEdit() *@
@*     { *@
@*         tagInEditModeId = -1; *@
@*     } *@
@* *@
@*     private async Task ExecuteJavascript(string script) *@
@*     { *@
@*         await JsRuntime.InvokeVoidAsync("eval", script); *@
@*     } *@
@* *@
