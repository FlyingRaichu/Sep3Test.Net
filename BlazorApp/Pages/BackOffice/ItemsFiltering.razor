@page "/ItemsFiltering"
@using System.Net.Http.Json
@using Domain.DTOs
@using HttpClients.Implementations
@inject IItemService itemService

<MudDataGrid T="Item" MultiSelection="true" Items="@Items" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true" RowClick="@RowClicked" SelectedItemsChanged="@SelectedItemsChanged">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Items</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="Item" />
        <PropertyColumn Property="x => x.Id" Title="ID" Sortable="false" Filterable="false" />
        <PropertyColumn Property="x => x.Title" SortBy="@_sortBy" />
        <PropertyColumn Property="x => x.Manufacture" />
        <PropertyColumn Property="x => x.Description" />
        <PropertyColumn Property="x => x.Price" />
        <PropertyColumn Property="x => x.Stock" Title="Stock" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Item" />
    </PagerContent>
</MudDataGrid>

<div class="d-flex flex-wrap mt-4">
    <!-- Add any additional filter controls if needed -->
</div>

<MudExpansionPanels Style="flex:1">
    <MudExpansionPanel Text="Show Events">
        @foreach (var message in _events)
        {
            <MudText Typo="@Typo.body2">@message</MudText>
        }
        @if(_events.Count > 0) 
        {
            <div class="d-flex">
                <MudSpacer/>
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private IEnumerable<Item> Items = new List<Item>();
    private string _searchString;
    private List<string> _events = new();
    // custom sort by title
    private Func<Item, object> _sortBy => x =>
    {
        return x.Title;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<Item, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        bool titleMatch = x.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
        bool manufacturerMatch = x.Manufacture.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
        bool priceMatch = x.Price.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase);
        bool description = x.Description.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    // Add other properties for quick filtering if needed

        return titleMatch || manufacturerMatch || priceMatch || description;
    };

    protected override async Task OnInitializedAsync()
    {
        Items = await itemService.GetItemsAsync(null, null, null, null);
    }

    // events
    void RowClicked(DataGridRowClickEventArgs<Item> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<Item> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }
}
