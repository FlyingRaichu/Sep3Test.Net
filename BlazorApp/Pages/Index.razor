@page "/"
@using HttpClients.Implementations
@using HttpClients.Interfaces
@inject IItemService ItemService;
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager;
@* @attribute [Authorize] *@
@* @attribute [Authorize("MustBeAdmin")] *@


<PageTitle>Index</PageTitle>

<AuthorizeView Policy="MustBeAdmin">
    <Authorized>
        <h6 style="color:green">u are logged in as admin</h6>
    </Authorized>
    <NotAuthorized>
        <h6 style="color:red">you are not logged in as admin</h6>
    </NotAuthorized>
</AuthorizeView>

<AuthorizeView Policy="User">
    <Authorized>
        <h6 style="color:green">u are logged in as user</h6>
    </Authorized>
    <NotAuthorized>
        <h6 style="color:red">you are not logged in as user</h6>
    </NotAuthorized>
</AuthorizeView>

<h1>Items</h1>
<button class="btn btn-primary" @onclick="GoToCheckoutPage">Go to Checkout</button>

@if (items == null)
{
    
}
else if (!items.Any())
{
    <p>No items to display.</p>
}
else
{
    <ul class="items">
        @foreach (var item in items)
        {
            <li>
                <strong><h3>@item.Title</h3></strong>
                <strong><p>@item.Description</p></strong>
                <strong><p>Price: @item.Price</p></strong>
            </li>
        }
    </ul>
}


@code
{
    private IEnumerable<Item>? items;
    private string statusMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();
    }

    private async Task LoadPosts()
    {
        try
        {
            items = await ItemService.GetPostsAsync(null, null, null);
        }
        
        catch (Exception e)
        {
            Console.WriteLine(e);
            statusMessage = e.Message;
        }
    }
    private void GoToCheckoutPage()
    {
        NavigationManager.NavigateTo("/Checkout");
    }
}
