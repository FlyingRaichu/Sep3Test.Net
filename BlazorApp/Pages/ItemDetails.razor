@page "/ItemDetails"
@using BlazorApp.Service
@using Domain.DTOs
@using Domain.DTOs.Review
@using HttpClients.Implementations
@using HttpClients.Interfaces
@inject ShoppingCartService ShoppingCartService;
@using BlazorApp.Pages.Services
@using System.Runtime.InteropServices.ComTypes
@using System.ComponentModel
@inject NavService Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IFavoriteService FavService
@inject NavigationManager NavManager
@inject IReviewService ReviewService
@inject IUserService UserService

<h3>Item Details</h3>
<MudGrid Justify="Justify.Center">
    <!--Image section-->
    <MudItem md="6">
        <MudPaper Class="pa-16 ma-2 d-flex justify-content-center">
            <MudImage Src="images/s.jpg" Alt="@Navigation.Selected.Title">img</MudImage>
        </MudPaper>
    </MudItem>

    <!--details section-->
    <MudItem md="6">
        <MudPaper Class="pa-16 ma-2">
            <MudGrid>
                <MudItem xs="6">
                    <MudText Typo="Typo.h5">@Navigation.Selected.Title</MudText>
                </MudItem>
                <MudItem xs="6">
                    <MudText>@Navigation.Selected.Price DKK</MudText>
                </MudItem>
            </MudGrid>
            <MudGrid>
                <MudItem xs="6">
                    <MudText>@Navigation.Selected.Description</MudText>
                </MudItem>
                <MudItem xs="6">
                    <MudItem>
                        <MudNumericField @bind-Value="quantity" Label="Quantity" Variant="Variant.Text" Min="1"/>
                    </MudItem>
                    <MudItem>
                        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.AddShoppingCart"
                                   OnClick="@(() => AddToCart(Navigation.Selected.Id))" FullWidth="true" Class="ma-2" Color="Color.Tertiary">Add to Cart</MudButton>
                    </MudItem>
                    <!--gotta check for authorization here, otherwise favoriting isn't permitted-->
                    <AuthorizeView>
                        <Authorized>
                            @if (isFavorite)
                            {
                                <MudButton Variant="Variant.Outlined" EndIcon="@Icons.Material.Filled.StarOutline"
                                           OnClick="RemoveFavorite" FullWidth="true" Class="ma-2" Color="Color.Warning">Unfavorite</MudButton>
                            }
                            else
                            {
                                <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Star"
                                           OnClick="AddFavorite" FullWidth="true" Class="ma-2" Color="Color.Warning">Favorite</MudButton>
                            }
                        </Authorized>
                    </AuthorizeView>
                    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ShoppingCart" FullWidth="true" Class="ma-2" Color="Color.Info" OnClick="Checkout">Go to Checkout</MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>

    <MudGrid Justify="Justify.Center">
        <MudItem>
            <MudText Typo="Typo.h4">Reviews:</MudText>
        </MudItem>
    </MudGrid>

    <MudGrid>
        <MudItem style="width: 100%">
            <MudPaper Class="pa-16 ma-2">
                <AuthorizeView Policy="LoggedIn">
                    <Authorized>
                        @* Create Review *@
                        <RatingStars/>
                        <MudTextField @bind-Value="content"/>
                        <MudButton Variant="Variant.Filled" Style="background: #4DD0E1; color: #ffffff; margin-top: 10px;" @onclick="@(() => AddReviewAsync(context.User.Claims.First(claim => claim.Type == "Username").Value))" class="acceptbtn">Post</MudButton>
                    </Authorized>
                    <NotAuthorized>
                        <MudText>To add a review, create an account</MudText>
                    </NotAuthorized>
                </AuthorizeView>
            </MudPaper>
        </MudItem>

    </MudGrid>


    @* <!--Ratings section--> *@

    @if (reviews != null && reviews.Any())
    {
        @foreach (Review review in reviews)
        {
            <MudItem xs="12">
                <MudPaper Class="pa-16 ma-2">
                    <MudText Typo="Typo.h6">@review.Username</MudText>
                    <MudRating ReadOnly="true" SelectedValue="@review.Rating"/>
                    <MudText>@review.Content</MudText>
                </MudPaper>
            </MudItem>
        }
    }
    else
    {
        <MudText>No review has been added.</MudText>
    }
</MudGrid>

@code {
    private int quantity { get; set; } = 1;
    private AuthenticationState authState;
    private bool isFavorite;

    private ICollection<Review>? reviews;
    private string content = "";

    protected override async Task OnParametersSetAsync()
    {
        await RefreshFavoriteStatus();
        LoadReviewsAsync();
    }

    private async Task RefreshFavoriteStatus()
    {
        authState = await AuthStateProvider.GetAuthenticationStateAsync();

        //if logged in, toggle isFavorite to change button display
        if (authState.User.Identity?.IsAuthenticated ?? false)
        {
            FavoriteDto dto = new(Navigation.LoggedInUserId, Navigation.Selected.Id);
            isFavorite = await FavService.GetAsync(dto, UserHttpClient.Jwt) != null;
        }

        StateHasChanged(); //re-render if there are any changes
    }

    private async void AddFavorite()
     {
         FavoriteDto dto = new(Navigation.LoggedInUserId, Navigation.Selected.Id);
        try
        {
            var createdFavorite = await FavService.CreateAsync(dto, UserHttpClient.Jwt);
            isFavorite = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating favorite: {ex.Message}");
        }

        StateHasChanged();
     }

    private async void RemoveFavorite()
    {
        FavoriteDto dto = new(Navigation.LoggedInUserId, Navigation.Selected.Id);
        try
        {
            var deletedFavorite = await FavService.DeleteAsync(dto, UserHttpClient.Jwt);
            isFavorite = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting favorite: {ex.Message}");
        }

         StateHasChanged();
     }

     private async Task AddToCart(int itemId)
     {
       await ShoppingCartService.AddOrderItem(itemId, quantity);
         NavManager.NavigateTo("/ShoppingCart");
     }

    private void Checkout()
    {
        Navigation.CurrentPage = "Checkout";
        NavManager.NavigateTo("/Checkout");
    }
    private void AddToCart()
    {
    }

    //Review stuff;
    private async void AddReviewAsync(string username)
    {
        try
        {
            ReviewCreationDto dto = new(content, RatingStars.selectedVal, username, @Navigation.Selected.Id);
            await ReviewService.CreateAsync(dto, UserHttpClient.Jwt);
            content = "";
            RatingStars.selectedVal = 0;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async void LoadReviewsAsync()
    {
        try
        {
            reviews = await ReviewService.GetAllReviewsByItemIdAsync(@Navigation.Selected.Id);
            Console.WriteLine(reviews.ToString());
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}